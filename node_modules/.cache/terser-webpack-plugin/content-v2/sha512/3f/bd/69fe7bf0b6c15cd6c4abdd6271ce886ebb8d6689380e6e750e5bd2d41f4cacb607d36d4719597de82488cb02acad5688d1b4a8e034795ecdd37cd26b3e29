{"map":"{\"version\":3,\"sources\":[\"/home/daniel/Desktop/weather-app/src/components/Titles.js\",\"/home/daniel/Desktop/weather-app/src/components/Form.js\",\"/home/daniel/Desktop/weather-app/src/components/Weather.js\",\"/home/daniel/Desktop/weather-app/src/App.js\",\"/home/daniel/Desktop/weather-app/src/serviceWorker.js\",\"/home/daniel/Desktop/weather-app/src/index.js\"],\"names\":[\"Titles\",\"react_default\",\"a\",\"createElement\",\"Form\",\"props\",\"onSubmit\",\"getWeather\",\"type\",\"name\",\"placeholder\",\"Weather\",\"city\",\"country\",\"temperature\",\"humidity\",\"description\",\"error\",\"API_key\",\"App\",\"state\",\"undefined\",\"_callee\",\"event\",\"api_call\",\"data\",\"regenerator_default\",\"wrap\",\"_context\",\"prev\",\"next\",\"preventDefault\",\"target\",\"elements\",\"value\",\"fetch\",\"concat\",\"sent\",\"json\",\"console\",\"log\",\"_this\",\"setState\",\"main\",\"temp\",\"sys\",\"weather\",\"stop\",\"components_Titles\",\"components_Form\",\"this\",\"components_Weather\",\"React\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React from \\\"react\\\";\\n\\nconst Titles = () =>(\\n    <div>\\n    <h1>Weather Finder</h1>\\n    <p>Find out temperature, conditions and more ....</p>\\n    </div>\\n)\\n\\nexport default Titles;\",\"import React from \\\"react\\\";\\n\\nconst Form = (props) => (   \\n    <form onSubmit={props.getWeather}>\\n    <input type=\\\"text\\\" name=\\\"city\\\" placeholder=\\\"city\\\"></input>\\n    <input type=\\\"text\\\" name=\\\"country\\\" placeholder=\\\"country\\\"></input>\\n    <button>Get Weather</button>\\n    </form>\\n);\\n\\nexport default Form;\",\"import React from \\\"react\\\";\\n\\nconst Weather = (props) =>(\\n    <div>\\n    {/* checks if props are valid values then displays */}\\n    {props.city && props.country && <p>Location: {props.city}, {props.country}</p>}\\n    {props.temperature && <p>Temperature: {props.temperature}</p>}\\n    {props.humidity && <p>Humidity: {props.humidity}</p>}\\n    {props.description && <p>Conditions: {props.description}</p>}\\n    {props.error && <p> {props.error}</p>}\\n    </div>\\n);\\n\\nexport default Weather;\",\"import React from \\\"react\\\";\\n\\nimport Titles from \\\"./components/Titles\\\";\\n\\nimport Form from \\\"./components/Form\\\";\\n\\nimport Weather from \\\"./components/Weather\\\";\\n\\nconst API_key = \\\"e33b30e5c4249ac0b36580c63612e17c\\\";\\n\\nclass App extends React.Component {\\n    state = {\\n        temperature: undefined,\\n        city: undefined,\\n        country: undefined,\\n        humidity: undefined,\\n        description: undefined,\\n        error: undefined\\n    }\\n    getWeather = async(event) => {\\n        event.preventDefault();\\n        const city = event.target.elements.city.value;\\n        const country = event.target.elements.country.value;\\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}&units=imperial`);\\n        //converts data to json format\\n        const data = await api_call.json();\\n        // if user inputs valid str\\n        if (city && country){\\n            console.log(data);\\n            this.setState({\\n                temperature: data.main.temp,\\n                city: data.name,\\n                country: data.sys.country,\\n                humidity: data.main.humidity,\\n                description: data.weather[0].description,\\n                error: \\\"\\\"\\n            });\\n        }\\n        else{\\n            this.setState({\\n                error: \\\"Please enter values.\\\"\\n            });\\n        }\\n    }\\n\\n    render(){\\n        return (\\n            <div>\\n                <Titles/>\\n                {/*  prop getweather = this.function  */}\\n                <Form getWeather={this.getWeather}/>\\n                <Weather \\n                temperature={this.state.temperature}\\n                city={this.state.city}\\n                country={this.state.country}\\n                humidity={this.state.humidity}\\n                description={this.state.description}\\n                error={this.state.error}\\n                />\\n            </div>\\n        );\\n    }\\n}\\n\\nexport default App;\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\n// renders App to root div in HTML\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{10:function(e,t,n){e.exports=n(19)},16:function(e,t,n){},19:function(e,t,n){\"use strict\";n.r(t);var r=n(0),a=n.n(r),i=n(3),c=n.n(i),o=(n(16),n(1)),u=n.n(o),l=n(4),s=n(5),m=n(6),p=n(8),d=n(7),h=n(9),y=function(){return a.a.createElement(\"div\",null,a.a.createElement(\"h1\",null,\"Weather Finder\"),a.a.createElement(\"p\",null,\"Find out temperature, conditions and more ....\"))},v=function(e){return a.a.createElement(\"form\",{onSubmit:e.getWeather},a.a.createElement(\"input\",{type:\"text\",name:\"city\",placeholder:\"city\"}),a.a.createElement(\"input\",{type:\"text\",name:\"country\",placeholder:\"country\"}),a.a.createElement(\"button\",null,\"Get Weather\"))},f=function(e){return a.a.createElement(\"div\",null,e.city&&e.country&&a.a.createElement(\"p\",null,\"Location: \",e.city,\", \",e.country),e.temperature&&a.a.createElement(\"p\",null,\"Temperature: \",e.temperature),e.humidity&&a.a.createElement(\"p\",null,\"Humidity: \",e.humidity),e.description&&a.a.createElement(\"p\",null,\"Conditions: \",e.description),e.error&&a.a.createElement(\"p\",null,\" \",e.error))},E=\"e33b30e5c4249ac0b36580c63612e17c\",w=function(e){function t(){var e,n;Object(s.a)(this,t);for(var r=arguments.length,a=new Array(r),i=0;i<r;i++)a[i]=arguments[i];return(n=Object(p.a)(this,(e=Object(d.a)(t)).call.apply(e,[this].concat(a)))).state={temperature:void 0,city:void 0,country:void 0,humidity:void 0,description:void 0,error:void 0},n.getWeather=function(){var e=Object(l.a)(u.a.mark(function e(t){var r,a,i,c;return u.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),r=t.target.elements.city.value,a=t.target.elements.country.value,e.next=5,fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(r,\",\").concat(a,\"&appid=\").concat(E,\"&units=imperial\"));case 5:return i=e.sent,e.next=8,i.json();case 8:c=e.sent,r&&a?(console.log(c),n.setState({temperature:c.main.temp,city:c.name,country:c.sys.country,humidity:c.main.humidity,description:c.weather[0].description,error:\"\"})):n.setState({error:\"Please enter values.\"});case 10:case\"end\":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}(),n}return Object(h.a)(t,e),Object(m.a)(t,[{key:\"render\",value:function(){return a.a.createElement(\"div\",null,a.a.createElement(y,null),a.a.createElement(v,{getWeather:this.getWeather}),a.a.createElement(f,{temperature:this.state.temperature,city:this.state.city,country:this.state.country,humidity:this.state.humidity,description:this.state.description,error:this.state.error}))}}]),t}(a.a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(a.a.createElement(w,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[10,1,2]]]);","extractedComments":[]}